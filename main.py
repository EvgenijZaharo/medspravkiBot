import re, os
from typing import Final
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

TOKEN: Final = os.getenv('API_TOKEN')
ADMIN_ID: Final = os.getenv('ADMIN_ID')


CONTACT, WAITING_FOR_REPLY = range(2)          
HELP_NAME, HELP_PHONE, HELP_TEXT = range(2, 5)   

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"), KeyboardButton(text="üìã –ü–æ–º–æ—â—å —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π")]
    ],
    resize_keyboard=True
)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç—ã: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)
phone_pattern = re.compile(r"^(?:\+7|8)\d{10}$")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu)

async def contact_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    return CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    message = update.message.text

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å
    button = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{user.id}")
    )

    admin_text = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–û—Ç: @{user.username or user.first_name}\nID: {user.id}\n\n{message}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, reply_markup=button)

    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

async def start_reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if str(update.effective_user.id) != str(ADMIN_ID):
        await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å
    user_id = int(query.data.split(":")[1])
    context.user_data["reply_to_user_id"] = user_id

    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    return WAITING_FOR_REPLY

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = context.user_data.get("reply_to_user_id")

    if not user_id:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}"
        )
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    context.user_data.clear()
    return ConversationHandler.END

async def help_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:")
    return HELP_NAME

async def handle_help_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("‚ö†Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:")
        return HELP_NAME
    context.user_data["help_name"] = name
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:")
    return HELP_PHONE

async def handle_help_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not phone_pattern.fullmatch(phone):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:")
        return HELP_PHONE
    context.user_data["help_phone"] = phone
    await update.message.reply_text("‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –≤–∞–º –Ω—É–∂–Ω–∞:")
    return HELP_TEXT

async def handle_help_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = update.message.text.strip()
    context.user_data["help_text"] = help_text

    name = context.user_data.get("help_name")
    phone = context.user_data.get("help_phone")
    user = update.message.from_user

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å
    button = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{user.id}")
    )

    admin_text = (
        f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π:\n"
        f"–û—Ç: @{user.username or user.first_name}\n"
        f"ID: {user.id}\n"
        f"–ò–º—è: {name}\n"
        f"–ù–æ–º–µ—Ä: {phone}\n"
        f"–ó–∞–ø—Ä–æ—Å: {help_text}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, reply_markup=button)
    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=main_menu)
    context.user_data.clear()
    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –æ–±–µ–∏—Ö –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞: {context.error}")

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
    contact_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"), contact_start),
            CommandHandler("contact", contact_start)
        ],
        states={
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è "–ü–æ–º–æ—â—å —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π"
    help_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìã –ü–æ–º–æ—â—å —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π"), help_start)],
        states={
            HELP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_help_name)],
            HELP_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_help_phone)],
            HELP_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_help_text)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_reply_to_user, pattern=r"^reply_to:\d+$")],
        states={WAITING_FOR_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_reply)]},
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(contact_conv)
    app.add_handler(help_conv)
    app.add_handler(admin_conv)
    app.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
